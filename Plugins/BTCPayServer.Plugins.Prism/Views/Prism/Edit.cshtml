@using BTCPayServer.Abstractions.TagHelpers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using System.Linq
@using BTCPayServer
@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Payments
@using BTCPayServer.PayoutProcessors
@inject LightningAddressService LightningAddressService
@inject IScopeProvider ScopeProvider
@inject IEnumerable<IPayoutProcessorFactory> PayoutProcessorFactories
@inject  PayoutProcessorService PayoutProcessorService
@model BTCPayServer.Plugins.Prism.PrismSettings
@{
    var users = await LightningAddressService.Get(new LightningAddressQuery()
    {
        StoreIds = new[] {ScopeProvider.GetCurrentStoreId()}
    });
    ViewData.SetActivePage("Prism", "Prism", "Prism");
    var pmi = new PaymentMethodId("BTC", LightningPaymentType.Instance);
}

@if (PayoutProcessorFactories.Any(factory => factory.GetSupportedPaymentMethods().Contains(pmi)) && !(await PayoutProcessorService.GetProcessors(new PayoutProcessorService.PayoutProcessorQuery()
{
    Stores = new[] {ScopeProvider.GetCurrentStoreId()},
    PaymentMethods = new[] {pmi.ToString()}
})).Any())
{
    <div class="alert alert-warning mb-5" role="alert">
        An automated payout procesor for Lightning is required in order to automate prism payouts.
        <a class="alert-link p-0" asp-action="ConfigureStorePayoutProcessors" asp-controller="UIPayoutProcessors" asp-route-storeId="@ScopeProvider.GetCurrentStoreId()">Configure now</a>
    </div>
}
@if (!users.Any())
{
    <div class="alert alert-warning mb-5" role="alert">
        Prisms can currently only work on lightning addresses that are owned by the store. Please create a lightning address for the store.
        <a class="alert-link p-0" asp-action="EditLightningAddress" asp-controller="UILNURL" asp-route-storeId="@ScopeProvider.GetCurrentStoreId()">Configure now</a>
    </div>
}


<partial name="_StatusMessage"/>
@if (ViewData.ModelState.TryGetValue("VersionConflict", out var versionConflict))
{
    <div class="alert alert-danger">@versionConflict.Errors.First().ErrorMessage</div>
}


<h2 class="mb-4">@ViewData["Title"]
 <a href="https://dergigi.com/2023/03/12/lightning-prisms/" class="ms-1" target="_blank" rel="noreferrer noopener">
            <span class="fa fa-question-circle-o text-secondary" title="More information..."></span>
        </a>
    </h2>
<p class="text-muted">
    The prism plugin allows automated value splits for your lightning payments. You can set up multiple prisms, each with their own source (which is a <a asp-action="EditLightningAddress" asp-controller="UILNURL" asp-route-storeId="@ScopeProvider.GetCurrentStoreId()">lightning address username</a>) and destinations (which are other lightning addresses or lnurls). The plugin will automatically credit the configured percentage of the payment to the destination (while also making sure there is 2% reserved to cater for fees, don't worry, once the lightning node tells us the exact fee amount, we credit/debit the balance after the payment), and once the configured threshold is reached, a <a asp-action="Payouts" asp-controller="UIStorePullPayments" asp-route-storeId="@ScopeProvider.GetCurrentStoreId()" asp-route-payoutState="AwaitingPayment" asp-route-paymentMethodId="@pmi.ToString()">payout</a> will be created. Then, a <a asp-action="ConfigureStorePayoutProcessors" asp-controller="UIPayoutProcessors" asp-route-storeId="@ScopeProvider.GetCurrentStoreId()">payout processor</a> will run at intervals and process the payout.
</p>

<datalist id="users">
    @foreach (var user in users)
    {
        <option value="@user.Username"></option>
    }
</datalist>

<div class="row">
    <div class="col-12">
        <form method="post">
            <div class="row">
                <div class="col-xl-10 col-xxl-constrain">

                    <div class="form-group form-check">
                        <input asp-for="Enabled" type="checkbox" class="form-check-input"/>
                        <label asp-for="Enabled" class="form-check-label"></label>
                        <span asp-validation-for="Enabled" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="SatThreshold" class="form-label">Sat Threshold</label>
                        <input type="number" asp-for="SatThreshold" class="form-control"/>
                        <span asp-validation-for="SatThreshold" class="text-danger"></span>
                        <span class="text-muted">How many sats do you want to accumulate per destination before sending?</span>
                    </div>
                </div>
            </div>

            <div class="row" id="prism-holder">
                @for (int i = 0; i < Model.Splits?.Length; i++)
                {
                    <div class="prism col-sm-12 col-md-5 border border-light p-2 m-1">
                        <div class="form-group">
                            <label asp-for="Splits[i].Source" class="form-label"></label>
                            <input type="text" asp-for="Splits[i].Source" list="users" class="form-control src"/>
                            <span asp-validation-for="Splits[i].Source" class="text-danger "></span>

                            <span asp-validation-for="Splits[i].Destinations" class="text-danger w-100"></span>
                        </div>
                        <table class="table">
                            <thead>
                            <tr>
                                <th>
                                    Destination
                                </th>
                                <th> Percentage</th>
                                <th> Actions</th>
                            </tr>
                            </thead>
                            <tbody>
                            @for (var x = 0; x < Model.Splits[i].Destinations?.Length; x++)
                            {
                                <tr class="dest">
                                    <td>
                                        <div class="form-group">
                                            <input type="text" asp-for="Splits[i].Destinations[x].Destination" class="form-control"/>
                                            <span asp-validation-for="Splits[i].Destinations[x].Destination" class="text-danger"></span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <input type="range" asp-for="Splits[i].Destinations[x].Percentage" class="form-range" min="0" max="100"/>
                                            <output>@Model.Splits[i].Destinations[x].Percentage%</output>
                                            <span asp-validation-for="Splits[i].Destinations[x].Percentage" class="text-danger"></span>
                                        </div>
                                    </td>
                                    <td>
                                        <button type="button" class="remove-dest btn btn-link">Remove</button>
                                    </td>
                                </tr>
                            }


                            </tbody>
                            <tfoot>
                            <tr>
                                <td colspan="3">
                                    <button class="btn btn-link add-dest" type="button">Add</button>
                                    <button class="btn btn-link remove-prism" type="button">Remove Prism</button>
                                </td>
                            </tr>
                            </tfoot>
                        </table>
                    </div>
                }
            </div>
            <div class="row">
                <div class="d-flex">
                    <button name="command" type="submit" value="save" class="btn btn-primary  mx-2">Submit</button>
                    <button type="button" class="btn btn-primary  mx-2" id="add-prism">Add Prism</button>
                </div>
            </div>
        </form>
        <div class="row mt-4">
            @if (Model.DestinationBalance?.Any() is true)
            {
                <div class="col-sm-12 col-md-5 col-xxl-constrain border border-light">
                    <h4 class="text-center p-2">Destination Balances</h4>
                    <table class="table">
                        <tr>
                            <th>Destination</th>
                            <th>Sats</th>
                        </tr>
                        @foreach (var (dest, balance) in Model.DestinationBalance)
                        {
                            <tr>
                                <td>@dest</td>
                                <td>@(balance / 1000m)</td>
                            </tr>
                        }
                    </table>
                </div>
            }

            @if (Model.PendingPayouts?.Any() is true)
            {
                <div class="col-sm-12 col-md-5 col-xxl-constrain  border border-light">
                    <h4 class="text-center p-2">Pending Payouts</h4>
                    <table class="table">
                        <tr>
                            <th>Payout Id</th>
                            <th>Reserve fee</th>
                            <th>Amount</th>
                        </tr>
                        @foreach (var (payoutId, pendingPayout) in Model.PendingPayouts)
                        {
                            <tr>
                                <td>@payoutId</td>
                                <td>@pendingPayout.FeeCharged</td>
                                <td>@pendingPayout.PayoutAmount</td>
                            </tr>
                        }
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<template id="prism">

    <div class="prism col-sm-12 col-md-5 border border-light p-2 m-1">
        <div class="form-group">
            <label class="form-label">Source</label>
            <input type="text" name="Splits[i].Source" list="users" class="form-control src"/>
        </div>
        <table class="table">
            <thead>
            <tr>
                <th>
                    Destination
                </th>
                <th> Percentage</th>
                <th> Actions</th>
            </tr>
            </thead>
            <tbody>
            </tbody>
            <tfoot>
            <tr>
                <td colspan="3">
                    <button class="btn btn-link add-dest" type="button">Add</button>
                    <button class="btn btn-link remove-prism" type="button">Remove Prism</button>
                </td>
            </tr>
            </tfoot>
        </table>
    </div>
</template>
<template id="split">
    <tr class="dest">
        <td>
            <div class="form-group">
                <input type="text" name="Splits[i].Destinations[x].Destination" class="form-control"/>
            </div>
        </td>
        <td>
            <div class="form-group">
                <input type="range" name="Splits[i].Destinations[x].Percentage" class="form-range" min="0" max="100" value="0"/>
                <output>0%</output>
                <span class="text-danger"></span>
            </div>
        </td>
        <td>
            <button type="button" class="remove-dest btn btn-link">Remove</button>
        </td>
    </tr>
</template>

<script >
document.addEventListener("DOMContentLoaded", ()=>{
  
    setupDests();

    document.getElementById("add-prism").addEventListener("click", ()=>{
        const template = document.querySelector('#prism');
        const clone = template.content.cloneNode(true);
        const prismholder = document.getElementById("prism-holder");
        prismholder.appendChild(clone);
        const el = prismholder.lastElementChild
        setIndex();
        el.querySelectorAll(".add-dest").forEach(value =>{
            value.addEventListener("click",onAddDest );
        })
        el.querySelectorAll(".remove-prism").forEach(value =>{
            value.addEventListener("click",onRemovePrism );
        })
    });
    
     function onRemoveDest(evt){
        evt.target.parentElement.parentElement.remove();    
        setIndex(); 
     }   
     function onRemovePrism(evt){
         debugger;
        evt.target.parentElement.parentElement.parentElement.parentElement.parentElement.remove();    
        setIndex(); 
     }    
     function onUpdateValue(evt){
        evt.target.nextElementSibling.value = evt.target.value + "%";   
        setIndex(); 
     }     
           
     function onAddDest(evt){
        const template = document.querySelector('#split');
        const clone = template.content.cloneNode(true);
        evt.target.parentElement.parentElement.parentElement.previousElementSibling.appendChild(clone)
        setIndex(); 
        const el = evt.target.parentElement.parentElement.parentElement.previousElementSibling.lastElementChild;
        el.querySelectorAll(".remove-dest").forEach(value => {
            value.addEventListener("click",onRemoveDest );
        });
         el.querySelectorAll("input[type=range]").forEach(value =>{
                    
                         value.addEventListener("input",onUpdateValue );
                });
     } 
    
    function setupDests(){
       document.querySelectorAll(".remove-dest").forEach(value =>{
                       value.removeEventListener("click",onRemoveDest )
                        value.addEventListener("click",onRemoveDest );
               });
        
        document.querySelectorAll(".add-dest").forEach(value =>{
            
                value.removeEventListener("click",onAddDest )
                 value.addEventListener("click",onAddDest );
        })
        document.querySelectorAll(".remove-prism").forEach(value =>{
                    value.addEventListener("click",onRemovePrism );
                })
        document.querySelectorAll("input[type=range]").forEach(value =>{
            
                 value.addEventListener("input",onUpdateValue );
        });
    }
    
    function setIndex(){
        document.querySelectorAll(".prism").forEach((prism, key) => {
        
            prism.querySelector("input.src").name = `Splits[${key}].Source`;
            prism.querySelectorAll("tr.dest").forEach((value, key2) => {
                value.setAttribute("data-index", key);
                value.querySelectorAll("input").forEach(value1 => {
                    value1.name = `Splits[${key}].Destinations[${key2}].${value1.name.split(".").pop()}`;
                });
            })
        })
    }
});
</script>