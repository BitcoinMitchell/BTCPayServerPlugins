@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Client
@using BTCPayServer.Client.Models
@using BTCPayServer.Common
@using BTCPayServer.Plugins.Wabisabi
@using BTCPayServer.Security
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using NBitcoin
@using WalletWasabi.Blockchain.Analysis
@model object
@inject IScopeProvider ScopeProvider
@inject BTCPayServerClient Client
@inject WabisabiService WabisabiService;
@inject WalletProvider WalletProvider;
@inject WabisabiCoordinatorClientInstanceManager WabisabiCoordinatorClientInstanceManager

@inject IExplorerClientProvider ExplorerClientProvider

@{
    var available = true;
    @if (((dynamic) Model).CryptoCode != "BTC" || ((dynamic) Model).WalletEnabled is not true)
    {
        return;
    }

    @if (!(await ExplorerClientProvider.GetExplorerClient("BTC").GetStatusAsync()).IsFullySynched)
    {
        available = false;
        return;
    }
    var storeId = ScopeProvider.GetCurrentStoreId();

}
@if (available)
{
    {
        var settings = await WabisabiService.GetWabisabiForStore(storeId);
        var enabledSettings = settings.Settings.Where(coordinatorSettings => coordinatorSettings.Enabled);
        var cjHistory = (await WabisabiService.GetCoinjoinHistory(storeId)).Take(5).ToList();

        @if (!enabledSettings.Any())
        {
            <div class="widget">
                <header>
                    <h3>Coinjoin</h3>
                    <a asp-controller="WabisabiStore" asp-action="UpdateWabisabiStoreSettings" asp-route-storeId="@storeId" class="fw-semibold">
                        Manage
                    </a>
                </header>
                <p class="text-secondary my-3">
                    There are no configured coinjoin coordinators
                </p>
                <a asp-controller="WabisabiStore" asp-action="UpdateWabisabiStoreSettings" asp-route-storeId="@storeId" class="fw-semibold">
                    Configure coinjoin settings
                </a>
            </div>
        }
        else
        {
            <div class="widget store-wallet-balance" >
                <header>
                    <h3>Recent Coinjoins</h3>
                    @if (cjHistory.Any())
                    {
                        <a asp-controller="WabisabiStore" asp-action="ListCoinjoins" asp-route-storeId="@storeId">View All</a>
                    }
                </header>
                @if (!cjHistory.Any())
                {
                    <p class="text-secondary mt-3 mb-0">
                        There are no recent transactions.
                    </p>
                }
                else
                {
                    <div class="table-responsive-sm my-0">


                        <partial name="Wabisabi/CoinjoinHistoryTable" model="cjHistory"/>

                    </div>
                }
            </div>

            var wallet = (BTCPayWallet?) await WalletProvider.GetWalletAsync(storeId);

            var coins = await wallet.GetAllCoins();
            var privacy = wallet.GetPrivacyPercentage(coins, wallet.AnonScoreTarget);

            var privacyPercentage = Math.Round(privacy * 100);
            var colorCoins = coins.GroupBy(coin => coin.CoinColor(wallet.AnonScoreTarget)).ToDictionary(grouping => grouping.Key, grouping => grouping);
            <div class="widget store-numbers" >

            @if (wallet is { })
            {
                @if (!((BTCPayKeyChain) wallet.KeyChain).KeysAvailable)
                {
                    <div class="alert alert-danger d-flex align-items-center" role="alert">
                        <vc:icon symbol="warning"/>
                        <span class="ms-3">This wallet is either not a hot wallet, or enabled in yout store settings and will not be able to participate in coinjoins.</span>
                    </div>
                }
            }
            <header>
                <h4>Coinjoin stats</h4>
                <a asp-controller="WabisabiStore" asp-action="UpdateWabisabiStoreSettings" asp-route-storeId="@storeId" class="fw-semibold">
                    Configure coinjoin settings
                </a>

            </header>
            <div class="w-100">

            <div>
                <h6 class="mb-2">Privacy progress</h6>
                <div class="progress mb-2 position-relative" style="height: 2rem;">
                    <div class="w-100 text-center position-absolute bg-transparent progress-bar h-100"> @privacyPercentage%</div>
                    <div class="progress-bar bg-success" role="progressbar" style="width: @privacyPercentage%"></div>
                </div>
            </div>
            <div>
                <h6 class="mb-2">Coins per privacy</h6>
                <div class="progress mb-2" style="height: 2rem;">
                    @foreach (var cc in colorCoins)
                    {
                        var cssClass = cc.Key == AnonsetType.Green ? "bg-success" : cc.Key == AnonsetType.Orange ? "bg-warning" :
                            "bg-danger";
                        var text = cc.Key == AnonsetType.Green ? "private" : cc.Key == AnonsetType.Orange ? "semi-private" :
                            "non-private";

                        var tooltiptext = $"{cc.Value.Count()} {text} coins";
                        text = cc.Value.Count().ToString();
                        var percentage = decimal.Divide(cc.Value.Count(), coins.Count()) * 100;
                        <div class="progress-bar @cssClass" role="progressbar" style="width: @percentage%" data-bs-toggle="tooltip" title="@tooltiptext">@text</div>
                    }
                </div>
            </div>
            <div>
                <h6 class="mb-2">Value per privacy</h6>
                <div class="progress mb-2" style="height: 2rem;">
                    @foreach (var cc in colorCoins)
                    {
                        var cssClass = cc.Key == AnonsetType.Green ? "bg-success" : cc.Key == AnonsetType.Orange ? "bg-warning" :
                            "bg-danger";
                        var text = cc.Key == AnonsetType.Green ? "private" : cc.Key == AnonsetType.Orange ? "semi-private" :
                            "non-private";
                        var percentage = decimal.Divide(cc.Value.Sum(coin => coin.Amount.ToDecimal(MoneyUnit.BTC)), coins.TotalAmount().ToDecimal(MoneyUnit.BTC)) * 100;
                        var tooltiptext = $"{cc.Value.Sum(coin => coin.Amount.ToDecimal(MoneyUnit.BTC))} {text} BTC";

                        text = cc.Value.Sum(coin => coin.Amount.ToDecimal(MoneyUnit.BTC)).ToString();
                        <div class="progress-bar @cssClass" role="progressbar" style="width: @percentage%" data-bs-toggle="tooltip" title="@tooltiptext">@text</div>
                    }
                </div>
            </div>
            @{
                var coinjoined = @coins.CoinJoinInProcess();
            }
            @if (coinjoined.Any())
            {
                var count = @coins.CoinJoinInProcess().Count();
                var totalCount = @coins.Count();
                var sum = @coinjoined.TotalAmount().ToDecimal(MoneyUnit.BTC);
                var totalSum = @coins.TotalAmount().ToDecimal(MoneyUnit.BTC);
                var sumPercentage = decimal.Divide(sum, totalSum) * 100;
                var countPercentage = decimal.Divide(count, totalCount) * 100;

                <div>
                    <h6 class="mb-2">Coins currently joining</h6>
                    <div class="progress mb-2 position-relative" style="height: 2rem;">
                        <div class="w-100 text-center position-absolute bg-transparent progress-bar h-100">@count </div>
                        <div class="progress-bar bg-info progress-bar-striped progress-bar-animated w-100" role="progressbar"></div>
                    </div>
                </div>
                <div>
                    <h6 class="mb-2">Value currently joining</h6>
                    <div class="progress mb-2 position-relative" style="height: 2rem;">
                        <div class="w-100 text-center position-absolute bg-transparent progress-bar h-100">@sum BTC</div>
                        <div class="progress-bar bg-info progress-bar-striped progress-bar-animated w-100" role="progressbar"></div>


                    </div>
                </div>
            }


            <!-- Modal -->
            <div class="modal modal-lg fade" id="coins" data-bs-keyboard="false" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5">Your coins</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            @{
                                var clusters = coins
                                    .GroupBy(coin => coin.HdPubKey.Cluster);
                            }
                            @* <table class="table table-striped"> *@
                            @*     <thead> *@
                            @*     <tr> *@
                            @*         <th colspan="3">Clusters</th> *@
                            @*     </tr> *@
                            @*     <tr> *@
                            @*         <th> *@
                            @*             Anonset *@
                            @*         </th> *@
                            @*         <th> *@
                            @*             Value *@
                            @*         </th> *@
                            @*         <th> *@
                            @*             Labels *@
                            @*         </th> *@
                            @*     </tr> *@
                            @*     </thead> *@
                            @* *@
                            @*                                    @foreach (var cluster in clusters) *@
                            @*                                    { *@
                            @*                                        var wavg = *@
                            @*                                        CoinjoinAnalyzer.WeightedAverage(cluster.Select(coin => new CoinjoinAnalyzer.AmountWithAnonymity(coin.AnonymitySet, coin.Amount))); *@
                            @*                                         *@
                            @*                                        <tr> *@
                            @*                                            <td> *@
                            @*                                                @wavg *@
                            @*                                            </td> *@
                            @*                                            <td> *@
                            @*                                                @cluster.Sum(c => c.Amount.ToDecimal(MoneyUnit.BTC)) *@
                            @*                                            </td> *@
                            @*                                            <td> *@
                            @*                                                @cluster.Key.Labels.ToString() *@
                            @*                                            </td> *@
                            @*                                        </tr> *@
                            @*                                    } *@
                            @*                                </table> *@
                            <table class="table">
                                <thead>

                                <tr>
                                    <th colspan="3">Coins</th>
                                </tr>
                                <tr>
                                    <th>
                                        Anonset
                                    </th>
                                    <th>
                                        Value
                                    </th>
                                    <th>
                                        Labels
                                    </th>
                                </tr>
                                </thead>

                                @foreach (var coin in coins.OrderByDescending(coin => coin.AnonymitySet).ThenByDescending(coin => coin.Amount))
                                {
                                    <tr>
                                        <td>
                                            @coin.AnonymitySet.ToString("0.##")
                                        </td>
                                        <td>
                                            @coin.Amount.ToDecimal(MoneyUnit.BTC) BTC
                                        </td>
                                        <td>
                                            @coin.HdPubKey.Labels.ToString()
                                        </td>
                                    </tr>
                                }
                            </table>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="list-group list-group-flush mb-2">
                <h5 class="list-group-item-heading text-muted">Enabled coordinators</h5>

                @{
                    foreach (var setting in enabledSettings)
                    {
                        if (!WabisabiCoordinatorClientInstanceManager.HostedServices.TryGetValue(setting.Coordinator, out var coordinator))
                        {
                            continue;
                        }
                        <div class="list-group-item">
                            <h6>@coordinator.CoordinatorDisplayName</h6>
                            <div class="row ">
                                <span class="text-muted col-sm-12 col-xxl-9 p-0 text-break">
                                    @coordinator.Coordinator
                                </span>

                                @if (!coordinator.WasabiCoordinatorStatusFetcher.Connected)
                                {
                                    <p class="text-danger mb-0 col-sm-12 col-xxl-3 p-0 text-break">Not connected</p>
                                }
                                else
                                {
                                    <p class="text-success mb-0 col-sm-12 col-xxl-3 p-0 text-break">Connected</p>
                                }
                            </div>
                            @{
                                if (WalletProvider.BannedCoins.TryGetValue(coordinator.CoordinatorName, out var bannedCoinsList))
                                {
                                    var bannedCoins = coins.Where(coin => bannedCoinsList.ContainsKey(coin.Outpoint));
                                    @if (bannedCoins.Any())
                                    {
                                        <div>
                                            <h6 class="mb-2">Coins currently banned (for disrupting rounds)</h6>
                                            <div class="progress mb-2 position-relative" style="height: 2rem;">
                                                <div class="w-100 text-center position-absolute bg-transparent progress-bar h-100">@bannedCoins.Count() </div>
                                                <div class="progress-bar bg-danger w-100" role="progressbar"></div>
                                            </div>
                                        </div>
                                    }
                                }
                            }


                        </div>
                    }
                }
            </div>

            <button type="button" class="btn btn-text p-1" data-bs-toggle="modal" data-bs-target="#coins">
                View coins
            </button>


            </div>
            </div>
        }
    }
}