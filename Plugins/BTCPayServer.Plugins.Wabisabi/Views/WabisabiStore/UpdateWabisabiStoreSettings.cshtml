@using BTCPayServer.Plugins.Wabisabi
@using BTCPayServer.Abstractions.Contracts
@using NBitcoin
@using System.Security.Claims
@using BTCPayServer
@using BTCPayServer.Client
@using BTCPayServer.Configuration
@using BTCPayServer.Services.Stores
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using WalletWasabi.Backend.Controllers
@model BTCPayServer.Plugins.Wabisabi.WabisabiStoreSettings
@inject WabisabiCoordinatorClientInstanceManager WabisabiCoordinatorClientInstanceManager
@inject IScopeProvider _scopeProvider
@inject StoreRepository StoreRepository
@inject WalletProvider WalletProvider
@inject BTCPayNetworkProvider BtcPayNetworkProvider
@inject BTCPayServerOptions BtcPayServerOptions
@{
    var storeId = _scopeProvider.GetCurrentStoreId();
    Layout = "../Shared/_NavLayout.cshtml";
    ViewData["NavPartialName"] = "../UIStores/_Nav";
    ViewData.SetActivePage("Plugins", "BTCPayServer.Views.Stores.StoreNavPages", "Wabisabi coinjoin support", storeId);
    var userid = Context.User.Claims.Single(claim => claim.Type == ClaimTypes.NameIdentifier).Value;
    var anyEnabled = Model.Settings.Any(settings => settings.Enabled);
    ScriptPubKeyType? scriptType;

    var stores = (await StoreRepository.GetStoresByUserId(userid))
        .ToDictionary(s => s.Id, s => (s, s.GetDerivationSchemeSettings(BtcPayNetworkProvider, "BTC")));

    stores.TryGetValue(storeId, out var thisStore);
    scriptType = thisStore.Item2?.AccountDerivation.ScriptPubKeyType();
    var selectStores =
        stores.Where(pair => pair.Key != storeId && pair.Value.Item2 is not null && pair.Value.Item2?.AccountDerivation.ScriptPubKeyType() == scriptType)
            .Select(pair => new SelectListItem(pair.Value.s.StoreName, pair.Key, Model.MixToOtherWallet == pair.Key)).Prepend(new SelectListItem("None", ""));
}

<div class="row">
    <div class="d-flex">
        <h2 class="">Coinjoin configuration</h2>
        <a href="https://github.com/Kukks/BTCPayServerPlugins/blob/master/Plugins/BTCPayServer.Plugins.Wabisabi/readme.md" class="ms-1" target="_blank" rel="noreferrer noopener">
            <span class="fa fa-question-circle-o text-secondary" title="More information..."></span>
        </a>
    </div>
</div>
<form method="post">
@{
    if (BtcPayServerOptions.SocksEndpoint is null)
    {
         <div class="alert alert-danger d-flex align-items-center" role="alert">
                <vc:icon symbol="warning"/>
                <span class="ms-3">TOR is not configured on this BTCPay Server instance. All communication will be over clearnet and therefore not private!</span>
         </div>
    }
    
    var wallet = await WalletProvider.GetWalletAsync(storeId);
    if (wallet is BTCPayWallet)
    {
     
        @if (!((BTCPayKeyChain) wallet.KeyChain).KeysAvailable)
        {
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <vc:icon symbol="warning"/>
                <span class="ms-3">This wallet is either not a hot wallet, or enabled in your store settings and will not be able to participate in coinjoins.</span>
            </div>
        }
    }
}


<div class="@(anyEnabled ? "" : "d-none") card card-body coordinator-settings">
    <div class="row">
        <div class="col-sm-12 col-md-6">
            <div class="form-check">
                <input class="form-check-input plebModeRadio"
                       type="radio" asp-for="PlebMode" value="true">
                <label class="form-check-label" asp-for="PlebMode">
                    Pleb mode
                </label>
                <p class="text-muted">I just want to coinjoin.</p>
            </div>
        </div>
        <div class="col-sm-12 col-md-6">
            <div class="form-check">
                <input class="form-check-input plebModeRadio" asp-for="PlebMode" type="radio"value="false">
                <label class="form-check-label" asp-for="PlebMode">
                    Scientist mode
                </label>
                <p class="text-muted">The world is broken and I need to be vigilant about my bitcoin practices.</p>
            </div>
        </div>
    </div>
    <div id="advanced" class="@(Model.PlebMode ? "d-none" : "")">
        <div class="form-group">

            <label asp-for="AnonymitySetTarget" class="form-label">Anon score target</label>
            <input type="number" class="form-control" asp-for="AnonymitySetTarget" placeholder="target anon score" min="0">

            <p class="text-muted">Scores your coinjoined utxos based on how many other utxos in the coinjoin (and other previous coinjoin rounds) had the same value.<br/> Anonset score computation is not an exact science, and when using coordinators with massive liquidity, is not that important as all rounds (past, present, future) contribute to your privacy.</p>
        </div>
        <div class="form-group">

            <label asp-for="FeeRateMedianTimeFrameHours" class="form-label">Mining fee limits in hours</label>
            <input type="number" class="form-control" asp-for="FeeRateMedianTimeFrameHours" placeholder="hours" min="0">

            <p class="text-muted">Only coinjoin if the mining fee is below the median of the specified number of hours</p>
        </div>
        <div class="form-group">

            <label asp-for="MinimumDenominationAmount" class="form-label">Minimum denomination (in sats)</label>
            <input type="number" class="form-control" asp-for="MinimumDenominationAmount" placeholder="sats" min="0">
            <p class="text-muted">Do no use any of the standard denominations below this amount (creates change (which will get remixed) but prevent tiny utxos)</p>
        </div>
        <div class="form-group form-check">
            <label asp-for="ConsolidationMode" class="form-check-label">Coinsolidation mode</label>
            <input asp-for="ConsolidationMode" type="checkbox" class="form-check-input"/>
            <p class="text-muted">Feed as many coins to the coinjoin as possible.</p>
        </div>
        <div class="form-group form-check">
            <label asp-for="RedCoinIsolation" class="form-check-label">Cautious coinjoin entry mode </label>
            <input asp-for="RedCoinIsolation" type="checkbox" class="form-check-input"/>
            <p class="text-muted">Only allow a single non-private coin into a coinjoin.</p>
        </div>
        <div class="form-group form-check">
            <label asp-for="BatchPayments" class="form-check-label">Batch payments</label>
            <input asp-for="BatchPayments" type="checkbox" class="form-check-input"/>
            <p class="text-muted">Batch your pending payments (on-chain payouts awaiting payment) inside coinjoins.</p>
        </div>
        <div class="form-group">
            <label asp-for="CrossMixBetweenCoordinatorsMode" class="form-label">Mix funds between different coordinators</label>
            <select asp-for="CrossMixBetweenCoordinatorsMode" class="form-select">
                <option value="@WabisabiStoreSettings.CrossMixMode.WhenFree">Cross mix when free</option>
                <option value="@WabisabiStoreSettings.CrossMixMode.Always">Always cross mix</option>
                <option value="@WabisabiStoreSettings.CrossMixMode.Never">Never cross mix</option>
            </select>
            <p class="text-muted">Whether to allow mixed coins to be mixed within different coordinators for greater privacy (Warning: This will make your coins to lose the free remix within the same coordinator)</p>
        </div>
        <div class="form-group">
            <label asp-for="ExtraJoinProbability" class="form-label">Continuous Coinjoin</label>
            <input asp-for="ExtraJoinProbability" type="number" min="0" max="100" step="any" class="form-control"/>
            <p class="text-muted">Percentage (100 = 1% reality) probability of joining a round even if you have no payments to batch and all coins are private, prevents timing analysis. (Warning: a high probability will quickly eat up your balance in mining fees) </p>
        </div>
        <div class="form-group ">
            <label asp-for="MixToOtherWallet" class="form-check-label">Send to other wallet</label>
            <select asp-for="MixToOtherWallet" asp-items="selectStores" class="form-select"></select>
            <p class="text-muted">Send coins that have been created in a coinjoin in a standard denomination to another wallet</p>
        </div>

        <div class="list-group  form-group">
            <div class="list-group-item font-weight-bold">Only mix coins with these labels</div>
            @if (Model.InputLabelsAllowed?.Any() is not true)
            {
                <div class="list-group-item">No label filter applied</div>
            }
            else
            {
                @for (var xIndex = 0; xIndex < Model.InputLabelsAllowed.Count; xIndex++)
                {
                    <div class="list-group-item">
                        <div class="input-group input-group-sm">
                            <input asp-for="InputLabelsAllowed[xIndex]" type="text" class="form-control"/>
                            <button name="command" value="include-label-remove:@Model.InputLabelsAllowed[xIndex]" type="submit" class="btn btn-secondary btn-sm">Remove</button>
                        </div>
                    </div>
                }
            }
            <div class="list-group-item">
                <button name="command" value="include-label-add" type="submit" class="btn btn-secondary btn-sm">Add</button>
            </div>
        </div>
        <div class="list-group  form-group">
            <div class="list-group-item font-weight-bold">Only mix coins without these labels</div>
            @if (Model.InputLabelsExcluded?.Any() is not true)
            {
                <div class="list-group-item">No label filter applied</div>
            }
            else
            {
                @for (var xIndex = 0; xIndex < Model.InputLabelsExcluded.Count; xIndex++)
                {
                    <div class="list-group-item">

                        <div class="input-group input-group-sm">
                            <input asp-for="InputLabelsExcluded[xIndex]" type="text" class="form-control"/>
                            <button name="command" value="exclude-label-remove:@Model.InputLabelsExcluded[xIndex]" type="submit" class="btn btn-secondary btn-sm">Remove</button>
                        </div>
                    </div>
                }
            }
            <div class="list-group-item">
                <button name="command" value="exclude-label-add" type="submit" class="btn btn-secondary btn-sm">Add</button>
            </div>
        </div>

    </div>
</div>

@for (var index = 0; index < Model.Settings.Count; index++)
{
    <input asp-for="Settings[index].Coordinator" type="hidden"/>
    var s = Model.Settings[index];

    if (!WabisabiCoordinatorClientInstanceManager.HostedServices.TryGetValue(s.Coordinator, out var coordinator))
    {
        continue;
    }
    <div class="card  mt-3">
        <div class="card-header d-flex justify-content-between">
            <div>
                <div class="d-flex">

                    <h3>@coordinator.CoordinatorDisplayName</h3>
                    @if (coordinator.CoordinatorName != "local" && coordinator.CoordinatorName != "zksnacks")
                    {
                        <button name="command" type="submit" value="remove-coordinator:@(coordinator.CoordinatorName)" class="btn btn-link txt-danger" permission="@Policies.CanModifyServerSettings">Remove</button>
                    }
                </div>

                <span class="text-muted">@coordinator.Coordinator</span>
                <div>
                    @if (!coordinator.WasabiCoordinatorStatusFetcher.Connected)
                    {
                        <p>Coordinator Status: Not connected</p>
                    }
                    else
                    {
                        <p>
                            Coordinator Status: Connected

                        </p>
                    }

                    @if (coordinator.RoundStateUpdater.AnyRound && coordinator.RoundStateUpdater.RoundStates.Any(pair => pair.Value.BlameOf == uint256.Zero))
                    {
                        var round = coordinator.RoundStateUpdater.RoundStates.Last(pair => pair.Value.BlameOf == uint256.Zero).Value;
                        var roundParameters = round.CoinjoinState.Parameters;

                        <div class="modal modal-lg fade" id="config-@s.Coordinator">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="exampleModalLabel">@coordinator.CoordinatorDisplayName Last round parameters </h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body" style="white-space: pre-line">
                                        <table class="table table-responsive my-0">

                                            <tr>
                                                <th scope="row">Fee charged</th>
                                                @{
                                                    var fee = $"{roundParameters.CoordinationFeeRate.Rate * 100}% + Free remixing {(roundParameters.CoordinationFeeRate.PlebsDontPayThreshold <= 0 ? string.Empty : $"+ Free under {roundParameters.CoordinationFeeRate.PlebsDontPayThreshold.ToDecimal(MoneyUnit.BTC)} BTC")}";
                                                }
                                                <td>
                                                    @(fee)
                                                </td>
                                            </tr>
                                            <tr>
                                                <th scope="row">Allowed input amounts</th>
                                                <td>@roundParameters.AllowedInputAmounts.Min.ToDecimal(MoneyUnit.BTC) BTC - @roundParameters.AllowedInputAmounts.Max.ToDecimal(MoneyUnit.BTC) BTC</td>
                                            </tr>
                                            <tr>
                                                <th scope="row">Allowed input types</th>
                                                <td>@string.Join(", ", roundParameters.AllowedInputTypes)</td>
                                            </tr>
                                            <tr>
                                                <th scope="row">Allowed output amounts</th>
                                                <td>@roundParameters.AllowedOutputAmounts.Min.ToDecimal(MoneyUnit.BTC) BTC - @roundParameters.AllowedOutputAmounts.Max.ToDecimal(MoneyUnit.BTC) BTC</td>

                                            </tr>
                                            <tr>
                                                <th scope="row">Allowed output types</th>

                                                <td>@string.Join(", ", roundParameters.AllowedOutputTypes)</td>
                                            </tr>
                                            <tr>
                                                <th scope="row">Minimum inputs</th><td>@roundParameters.MinInputCountByRound</td>
                                            </tr>
                                            <tr>
                                                <th scope="row">Maximum inputs</th><td>@roundParameters.MaxInputCountByRound</td>
                                            </tr>
                                            <tr>
                                                <th scope="row">Maximum round registration time</th><td>@roundParameters.StandardInputRegistrationTimeout.ToString()</td>
                                            </tr>

                                        </table>
                                        <div class="alert alert-info">Please note that a coordinator can change its configuration at will. This is only a display of the last round received from them.</div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <a class="px-2 cursor-pointer"
                           data-bs-toggle="modal" data-bs-target="#config-@s.Coordinator">
                            Coordinator Config
                        </a>
                        @if (Model.Settings[index].RoundWhenEnabled is not null && !BTCPayWallet.IsRoundOk(roundParameters, Model.Settings[index]))
                        {
                            <div class="alert alert-danger w-100 mb-0 p-1">Round fees/parameters changed. Coinjoins will not occur unless you accept the new parameters.<button class="btn btn-link alert-link p-0" name="command" type="submit" value="accept-terms:@s.Coordinator"> Accept new terms</button></div>
                        }
                    }

                    <a class="px-2 w-100 cursor-pointer"
                       data-bs-toggle="modal" data-bs-target="#terms-@s.Coordinator"
                       style="
                                            right: 0;
                                            text-align: right;
                                        ">
                        By enabling this coordinator, you agree to their terms and conditions.
                    </a>
                </div>
            </div>
            @{
                var canEnable = coordinator.WasabiCoordinatorStatusFetcher.Connected && coordinator.RoundStateUpdater.AnyRound;
            }
            <div class="form-group form-check form" data-bs-toggle="tooltip" title="@(!canEnable ? "You cannot enable this coordinator until it is connected and a round has been seen" : string.Empty)">
                @if (Model.Settings[index].RoundWhenEnabled is not null)
                {
                    <input type="hidden" asp-for="Settings[index].RoundWhenEnabled.CoordinationFeeRate"/>
                    <input type="hidden" asp-for="Settings[index].RoundWhenEnabled.PlebsDontPayThreshold"/>
                    <input type="hidden" asp-for="Settings[index].RoundWhenEnabled.MinInputCountByRound"/>
                }

                <input asp-for="Settings[index].Enabled"

                       type="checkbox" class="form-check-input form-control-lg toggle-settings"
                       data-coordinator="@s.Coordinator"
                       disabled="@(!Model.Settings[index].Enabled && !canEnable)"/>

            </div>

        </div>
        <div class="modal modal-lg fade" id="terms-@s.Coordinator">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">@coordinator.CoordinatorName Terms & Conditions </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" style="white-space: pre-line">
                        @Safe.Raw(coordinator.TermsConditions)
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
}


<button name="command" type="submit" value="save" class="btn btn-primary mt-2">Save</button>
<a asp-controller="WabisabiStore" asp-action="ListCoinjoins" class="btn btn-secondary mt-2" asp-route-storeId="@storeId">Coinjoins</a>
</form>


<a asp-controller="WabisabiCoordinatorConfig" asp-action="UpdateWabisabiSettings" class="btn btn-secondary mt-2" permission="@Policies.CanModifyServerSettings">Coordinator runner</a>

<partial name="Wabisabi/AddCoordinatorPrompt" model="@(new DiscoveredCoordinator())"/>
<a class="btn btn-secondary mt-2" href="https://gist.github.com/nopara73/bb17e89d7dc9af536ca41f50f705d329" rel="noreferrer noopener" target="_blank">Enable Discreet payments - Coming soon</a>


@section PageFootContent {
    <partial name="_ValidationScriptsPartial"/>
}

<script type="text/javascript">

 function handlePlebModeChange(evt){
     const isPlebMode = evt.target.value === "true";
     
     const el = document.querySelector(`#advanced`);
     if (isPlebMode){
        el.classList.add("d-none");
     }else{
     
        el.classList.remove("d-none");
     }
 }
 
  function handleCoordinatorEnabled(evt){
      let enabled = evt.target.checked;
      if (!enabled){
        
      for (const settings of document.querySelectorAll("input.toggle-settings")) {
        if (settings.checked){
            enabled = true;
            break;
      }
          }}
      const el = document.querySelector(`.coordinator-settings`);
      if (!enabled){
         el.classList.add("d-none");
      }else{      
         el.classList.remove("d-none");
      }
  }

 document.addEventListener("DOMContentLoaded", function () {
     document.querySelectorAll("input.toggle-settings").forEach(value => value.addEventListener("change", handleCoordinatorEnabled));
            document.querySelectorAll("input.plebModeRadio").forEach(value => value.addEventListener("change", handlePlebModeChange));
        });
 

</script>